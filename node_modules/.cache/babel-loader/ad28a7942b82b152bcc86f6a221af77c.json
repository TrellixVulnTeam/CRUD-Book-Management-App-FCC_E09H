{"ast":null,"code":"var _jsxFileName = \"/Users/TLanPollard/Documents/GitHub/CRUD-Book-Management-App-FCC/src/components/BookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookForm = props => {\n  _s();\n\n  const [book, setBook] = useState(() => {\n    return {\n      // Checking if book prop is passed or not\n      // If pass, set to passed value otherwise an empty string\n      bookname: props.book ? props.book.bookname : '',\n      author: props.book ? props.book.author : '',\n      quantity: props.book ? props.book.quantity : '',\n      price: props.book ? props.book.price : '',\n      date: props.book ? props.book.date : ''\n    };\n  });\n  const [errorMsg, setErrorMsg] = useState('');\n  const {\n    bookname,\n    author,\n    price,\n    quantity\n  } = book;\n\n  const handleOnSubmit = event => {\n    event.preventDefault();\n    const values = [bookname, author, price, quantity];\n    let errorMsg = ''; // Checking to see if user has entered all details\n\n    const allFieldsFilled = values.every(field => {\n      const value = `${field}`.trim();\n      return value !== '' && value !== '0';\n    });\n\n    if (allFieldsFilled) {\n      const book = {\n        id: uuidv4(),\n        bookname,\n        author,\n        price,\n        quantity,\n        date: new Date()\n      };\n      props.handleOnSubmit(book);\n    } else {\n      errorMsg = 'Please fill out all the fields.';\n    }\n\n    setErrorMsg(errorMsg);\n  };\n\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target; // Change value of state based on which input field is changed\n\n    switch (name) {\n      case 'quantity':\n        // Check to see if entered value is integer without decimal point\n        if (value === '' || parseInt(value) === +value) {\n          setBook(prevState => ({ ...prevState,\n            [name]: value\n          }));\n        }\n\n        break;\n\n      case 'price':\n        // Checking for decimal number with only two digits after decimal point, used regexp \n        if (value === '' || value.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\n          setBook(prevState => ({ ...prevState,\n            [name]: value\n          }));\n        }\n\n        break;\n\n      default:\n        setBook(prevState => ({ ...prevState,\n          [name]: value\n        }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-form\",\n    children: [errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMsg\",\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleOnSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"name\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Book Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          className: \"input-control\",\n          type: \"text\",\n          name: \"bookname\",\n          value: bookname,\n          placeholder: \"Enter name of book\",\n          onchange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"author\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Book Author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          className: \"input-control\",\n          type: \"text\",\n          name: \"author\",\n          value: author,\n          placeholder: \"Enter name of author\",\n          onchange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"quantity\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          className: \"input-control\",\n          type: \"number\",\n          name: \"quantity\",\n          value: quantity,\n          placeholder: \"Enter available quantity\",\n          onchange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"price\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Book Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          className: \"input-control\",\n          type: \"text\",\n          name: \"price\",\n          value: price,\n          placeholder: \"Enter price of book\",\n          onchange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        className: \"submit-btn\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookForm, \"PuZwasfFxIs7LkJzMQjWMnRPk3s=\");\n\n_c = BookForm;\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"names":["React","useState","Form","Button","v4","uuidv4","BookForm","props","book","setBook","bookname","author","quantity","price","date","errorMsg","setErrorMsg","handleOnSubmit","event","preventDefault","values","allFieldsFilled","every","field","value","trim","id","Date","handleInputChange","name","target","parseInt","prevState","match"],"sources":["/Users/TLanPollard/Documents/GitHub/CRUD-Book-Management-App-FCC/src/components/BookForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst BookForm = (props) => {\n    const [book, setBook] = useState(() => {\n        return {\n        // Checking if book prop is passed or not\n        // If pass, set to passed value otherwise an empty string\n                    bookname: props.book ? props.book.bookname : '',\n        author: props.book ? props.book.author : '',\n        quantity: props.book ? props.book.quantity : '',\n        price: props.book ? props.book.price :          '',\n        date: props.book ? props.book.date : ''\n        \n        }\n\n    });\n\n    const [errorMsg, setErrorMsg] = useState('');\n    const { bookname, author, price, quantity } = book;\n\n    const handleOnSubmit = (event) => {\n        event.preventDefault();\n        const values = [bookname, author, price, quantity];\n        let errorMsg = '';\n\n        // Checking to see if user has entered all details\n        const allFieldsFilled = values.every((field) => {\n            const value = `${field}`.trim();\n            return value !== '' && value !== '0';\n        });\n\n        if (allFieldsFilled) {\n            const book = {\n                id: uuidv4(),\n                bookname,\n                author,\n                price,\n                quantity,\n                date: new Date()\n            };\n            props.handleOnSubmit(book);\n        } else {\n            errorMsg = 'Please fill out all the fields.';\n        }\n        setErrorMsg(errorMsg);\n    };\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n\n        // Change value of state based on which input field is changed\n        switch (name) {\n            case 'quantity':\n                // Check to see if entered value is integer without decimal point\n                if (value === '' || parseInt(value) === +value) {\n                    setBook((prevState) => ({\n                        ...prevState,\n                        [name]: value\n                    }));\n                }\n                break;\n            case 'price':\n                // Checking for decimal number with only two digits after decimal point, used regexp \n                if (value === '' || value.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\n                    setBook((prevState) => ({\n                        ...prevState,\n                        [name]: value\n                    }));\n                }\n                break;\n            default:\n                setBook((prevState) => ({\n                    ...prevState,\n                    [name]: value\n                }));\n        }\n    };\n\n    return (\n        <div className='main-form'>\n            {errorMsg && <p className='errorMsg'>{errorMsg}</p>}\n            <Form onSubmit={handleOnSubmit}>\n                <Form.Group controlId=\"name\">\n                    <Form.Label>Book Name</Form.Label>\n                    <Form.Control\n                        className='input-control'\n                        type='text'\n                        name='bookname'\n                        value={bookname}\n                        placeholder='Enter name of book'\n                        onchange={handleInputChange}\n                    />\n                </Form.Group>\n                <Form.Group controlId='author'>\n                    <Form.Label>Book Author</Form.Label>\n                    <Form.Control\n                        className='input-control'\n                        type='text'\n                        name='author'\n                        value={author}\n                        placeholder='Enter name of author'\n                        onchange={handleInputChange}\n                    />\n                </Form.Group>\n                <Form.Group controlId='quantity'>\n                    <Form.Label>Quantity</Form.Label>\n                    <Form.Control\n                        className='input-control'\n                        type='number'\n                        name='quantity'\n                        value={quantity}\n                        placeholder='Enter available quantity'\n                        onchange={handleInputChange}\n                    />\n                </Form.Group>\n                <Form.Group controlId='price'>\n                    <Form.Label>Book Price</Form.Label>\n                    <Form.Control\n                        className='input-control'\n                        type='text'\n                        name='price'\n                        value={price}\n                        placeholder='Enter price of book'\n                        onchange={handleInputChange}\n                    />\n                </Form.Group>\n                <Button variant='primary' type='submit' className='submit-btn'>\n                    Submit\n                </Button>\n            </Form>\n        </div>\n    );\n};\n\nexport default BookForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}